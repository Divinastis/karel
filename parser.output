   0  $accept : %entry% $end

   1  prog : BEGIN_PROG liste_sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG

   2  liste_sous_prog :
   3                  | define_new liste_sous_prog

   4  define_new : DEFINE_NEW_INSTRUCTION ID AS stmt SEMI

   5  stmts_opt :
   6            | stmts

   7  stmts : stmt
   8        | stmts SEMI stmt
   9        | stmts SEMI

  10  stmt : simple_stmt

  11  simple_stmt : TURN_LEFT
  12              | TURN_OFF
  13              | MOVE
  14              | PICK_BEEPER
  15              | PUT_BEEPER
  16              | BEGIN stmts END
  17              | ITERATE INT TIMES stmt
  18              | WHILE test DO stmt
  19              | IF test THEN stmt
  20              | ID
  21              | IF test THEN stmt ELSE stmt

  22  test : FRONT_IS_CLEAR
  23       | FRONT_IS_BLOCKED
  24       | LEFT_IS_CLEAR
  25       | LEFT_IS_BLOCKED
  26       | RIGHT_IS_CLEAR
  27       | RIGHT_IS_BLOCKED
  28       | NEXT_TO_A_BEEPER
  29       | NOT_NEXT_TO_A_BEEPER
  30       | FACING_NORTH
  31       | NOT_FACING_NORTH
  32       | FACING_EAST
  33       | NOT_FACING_EAST
  34       | FACING_SOUTH
  35       | NOT_FACING_SOUTH
  36       | FACING_WEST
  37       | NOT_FACING_WEST
  38       | ANY_BEEPERS_IN_BEEPER_BAG
  39       | NO_BEEPERS_IN_BEEPER_BAG

  40  %entry% : '\001' prog

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . prog  (40)

	BEGIN_PROG  shift 3
	.  error

	prog  goto 4


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : BEGIN_PROG . liste_sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG  (1)
	liste_sous_prog : .  (2)

	DEFINE_NEW_INSTRUCTION  shift 5
	BEGIN_EXEC  reduce 2

	liste_sous_prog  goto 6
	define_new  goto 7


state 4
	%entry% : '\001' prog .  (40)

	.  reduce 40


state 5
	define_new : DEFINE_NEW_INSTRUCTION . ID AS stmt SEMI  (4)

	ID  shift 8
	.  error


state 6
	prog : BEGIN_PROG liste_sous_prog . BEGIN_EXEC stmts_opt END_EXEC END_PROG  (1)

	BEGIN_EXEC  shift 9
	.  error


state 7
	liste_sous_prog : define_new . liste_sous_prog  (3)
	liste_sous_prog : .  (2)

	DEFINE_NEW_INSTRUCTION  shift 5
	BEGIN_EXEC  reduce 2

	liste_sous_prog  goto 10
	define_new  goto 7


state 8
	define_new : DEFINE_NEW_INSTRUCTION ID . AS stmt SEMI  (4)

	AS  shift 11
	.  error


state 9
	prog : BEGIN_PROG liste_sous_prog BEGIN_EXEC . stmts_opt END_EXEC END_PROG  (1)
	stmts_opt : .  (5)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	END_EXEC  reduce 5

	stmts_opt  goto 22
	stmt  goto 23
	stmts  goto 24
	simple_stmt  goto 25


state 10
	liste_sous_prog : define_new liste_sous_prog .  (3)

	.  reduce 3


state 11
	define_new : DEFINE_NEW_INSTRUCTION ID AS . stmt SEMI  (4)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	.  error

	stmt  goto 26
	simple_stmt  goto 25


state 12
	simple_stmt : MOVE .  (13)

	.  reduce 13


state 13
	simple_stmt : TURN_LEFT .  (11)

	.  reduce 11


state 14
	simple_stmt : TURN_OFF .  (12)

	.  reduce 12


state 15
	simple_stmt : BEGIN . stmts END  (16)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	.  error

	stmt  goto 23
	stmts  goto 27
	simple_stmt  goto 25


state 16
	simple_stmt : PICK_BEEPER .  (14)

	.  reduce 14


state 17
	simple_stmt : PUT_BEEPER .  (15)

	.  reduce 15


state 18
	simple_stmt : ITERATE . INT TIMES stmt  (17)

	INT  shift 28
	.  error


state 19
	simple_stmt : WHILE . test DO stmt  (18)

	NEXT_TO_A_BEEPER  shift 29
	FRONT_IS_CLEAR  shift 30
	FRONT_IS_BLOCKED  shift 31
	LEFT_IS_CLEAR  shift 32
	LEFT_IS_BLOCKED  shift 33
	RIGHT_IS_CLEAR  shift 34
	RIGHT_IS_BLOCKED  shift 35
	NOT_NEXT_TO_A_BEEPER  shift 36
	FACING_NORTH  shift 37
	NOT_FACING_NORTH  shift 38
	FACING_EAST  shift 39
	NOT_FACING_EAST  shift 40
	FACING_SOUTH  shift 41
	NOT_FACING_SOUTH  shift 42
	FACING_WEST  shift 43
	NOT_FACING_WEST  shift 44
	ANY_BEEPERS_IN_BEEPER_BAG  shift 45
	NO_BEEPERS_IN_BEEPER_BAG  shift 46
	.  error

	test  goto 47


state 20
	simple_stmt : IF . test THEN stmt  (19)
	simple_stmt : IF . test THEN stmt ELSE stmt  (21)

	NEXT_TO_A_BEEPER  shift 29
	FRONT_IS_CLEAR  shift 30
	FRONT_IS_BLOCKED  shift 31
	LEFT_IS_CLEAR  shift 32
	LEFT_IS_BLOCKED  shift 33
	RIGHT_IS_CLEAR  shift 34
	RIGHT_IS_BLOCKED  shift 35
	NOT_NEXT_TO_A_BEEPER  shift 36
	FACING_NORTH  shift 37
	NOT_FACING_NORTH  shift 38
	FACING_EAST  shift 39
	NOT_FACING_EAST  shift 40
	FACING_SOUTH  shift 41
	NOT_FACING_SOUTH  shift 42
	FACING_WEST  shift 43
	NOT_FACING_WEST  shift 44
	ANY_BEEPERS_IN_BEEPER_BAG  shift 45
	NO_BEEPERS_IN_BEEPER_BAG  shift 46
	.  error

	test  goto 48


state 21
	simple_stmt : ID .  (20)

	.  reduce 20


state 22
	prog : BEGIN_PROG liste_sous_prog BEGIN_EXEC stmts_opt . END_EXEC END_PROG  (1)

	END_EXEC  shift 49
	.  error


state 23
	stmts : stmt .  (7)

	.  reduce 7


state 24
	stmts_opt : stmts .  (6)
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)

	SEMI  shift 50
	END_EXEC  reduce 6


state 25
	stmt : simple_stmt .  (10)

	.  reduce 10


state 26
	define_new : DEFINE_NEW_INSTRUCTION ID AS stmt . SEMI  (4)

	SEMI  shift 51
	.  error


state 27
	stmts : stmts . SEMI stmt  (8)
	stmts : stmts . SEMI  (9)
	simple_stmt : BEGIN stmts . END  (16)

	SEMI  shift 50
	END  shift 52
	.  error


state 28
	simple_stmt : ITERATE INT . TIMES stmt  (17)

	TIMES  shift 53
	.  error


state 29
	test : NEXT_TO_A_BEEPER .  (28)

	.  reduce 28


state 30
	test : FRONT_IS_CLEAR .  (22)

	.  reduce 22


state 31
	test : FRONT_IS_BLOCKED .  (23)

	.  reduce 23


state 32
	test : LEFT_IS_CLEAR .  (24)

	.  reduce 24


state 33
	test : LEFT_IS_BLOCKED .  (25)

	.  reduce 25


state 34
	test : RIGHT_IS_CLEAR .  (26)

	.  reduce 26


state 35
	test : RIGHT_IS_BLOCKED .  (27)

	.  reduce 27


state 36
	test : NOT_NEXT_TO_A_BEEPER .  (29)

	.  reduce 29


state 37
	test : FACING_NORTH .  (30)

	.  reduce 30


state 38
	test : NOT_FACING_NORTH .  (31)

	.  reduce 31


state 39
	test : FACING_EAST .  (32)

	.  reduce 32


state 40
	test : NOT_FACING_EAST .  (33)

	.  reduce 33


state 41
	test : FACING_SOUTH .  (34)

	.  reduce 34


state 42
	test : NOT_FACING_SOUTH .  (35)

	.  reduce 35


state 43
	test : FACING_WEST .  (36)

	.  reduce 36


state 44
	test : NOT_FACING_WEST .  (37)

	.  reduce 37


state 45
	test : ANY_BEEPERS_IN_BEEPER_BAG .  (38)

	.  reduce 38


state 46
	test : NO_BEEPERS_IN_BEEPER_BAG .  (39)

	.  reduce 39


state 47
	simple_stmt : WHILE test . DO stmt  (18)

	DO  shift 54
	.  error


state 48
	simple_stmt : IF test . THEN stmt  (19)
	simple_stmt : IF test . THEN stmt ELSE stmt  (21)

	THEN  shift 55
	.  error


state 49
	prog : BEGIN_PROG liste_sous_prog BEGIN_EXEC stmts_opt END_EXEC . END_PROG  (1)

	END_PROG  shift 56
	.  error


state 50
	stmts : stmts SEMI . stmt  (8)
	stmts : stmts SEMI .  (9)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	END_EXEC  reduce 9
	SEMI  reduce 9
	END  reduce 9

	stmt  goto 57
	simple_stmt  goto 25


state 51
	define_new : DEFINE_NEW_INSTRUCTION ID AS stmt SEMI .  (4)

	.  reduce 4


state 52
	simple_stmt : BEGIN stmts END .  (16)

	.  reduce 16


state 53
	simple_stmt : ITERATE INT TIMES . stmt  (17)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	.  error

	stmt  goto 58
	simple_stmt  goto 25


state 54
	simple_stmt : WHILE test DO . stmt  (18)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	.  error

	stmt  goto 59
	simple_stmt  goto 25


state 55
	simple_stmt : IF test THEN . stmt  (19)
	simple_stmt : IF test THEN . stmt ELSE stmt  (21)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	.  error

	stmt  goto 60
	simple_stmt  goto 25


state 56
	prog : BEGIN_PROG liste_sous_prog BEGIN_EXEC stmts_opt END_EXEC END_PROG .  (1)

	.  reduce 1


state 57
	stmts : stmts SEMI stmt .  (8)

	.  reduce 8


state 58
	simple_stmt : ITERATE INT TIMES stmt .  (17)

	.  reduce 17


state 59
	simple_stmt : WHILE test DO stmt .  (18)

	.  reduce 18


state 60
	simple_stmt : IF test THEN stmt .  (19)
	simple_stmt : IF test THEN stmt . ELSE stmt  (21)

	ELSE  shift 61
	END_EXEC  reduce 19
	SEMI  reduce 19
	END  reduce 19


state 61
	simple_stmt : IF test THEN stmt ELSE . stmt  (21)

	MOVE  shift 12
	TURN_LEFT  shift 13
	TURN_OFF  shift 14
	BEGIN  shift 15
	PICK_BEEPER  shift 16
	PUT_BEEPER  shift 17
	ITERATE  shift 18
	WHILE  shift 19
	IF  shift 20
	ID  shift 21
	.  error

	stmt  goto 62
	simple_stmt  goto 25


state 62
	simple_stmt : IF test THEN stmt ELSE stmt .  (21)

	.  reduce 21


44 terminals, 10 nonterminals
41 grammar rules, 63 states
